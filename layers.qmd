# Layers

The layers represent the data, what the graph is all about. Everything else--the scales, coordinate system, faceting, and themes--are accessories to make the data clear and comprehensible. Therefore it is essential to get the data right. Even if everything else looks perfect, if the data is wrong the graph is worthless. Each layer consists of [five components](https://ggplot2-book.org/layers.html): 1) data, 2) aesthetic mapping, 3) geom, 4) stat, and 5) position. Most of the time you can rely on the defaults for 4) stat and 5) position, so we'll start with the first three components, all of which are required.

## Data

ggplot2 is designed to work only with data frames. That means no vectors, matrices, tables, or lists. If your data is is not in data frame form, you'll need to convert it to a data frame first. How can you tell if you have the right format? Use `class` to check:

```{r}
library(ggplot2)
class(faithful)
class(CO2)
class(diamonds)
class(Titanic)
class(Seatbelts)
```

As long as `data.frame` is one of the classes returned, you're good to go. So `faithful` and `CO2`, two of the built-in base R datasets would work, as would `diamonds` a dataset that comes with the ggplot2 package. Note that `class(diamonds)` also returns `tbl_df` and `tbl` indications that `diamonds` is also a *tibble*, the **tidyverse** version of a data frame. We'll return to this topic later. Neither `Titanic` nor `Seatbelts` is a data frame so both would produce errors if we tried to create graphs from this data with ggplot2 without converting the data. If you read data from a file with `read.csv()`, `read_csv()`, or other functions for reading tabular data, it will be a `data.frame`.

## Geoms

Geoms are the heart and soul of graphics made with ggplot2. A "geom" is short-hand for geometric object, the shapes that represent. We will begin with six commonly used geoms, shown below.

```{r}
#| echo: false
#| fig-width: 3
#| layout-ncol: 3
#| out-width: 85%


library(tidyverse)
data_color <- "#008fd5"
fs <- 14

df <- data.frame(state.x77) |> 
  rownames_to_column("State") |> 
  mutate(Region = state.region)

m <- .25

ggplot(df, aes(Income, Illiteracy)) + 
  geom_point(color = data_color, size = 2) + ggtitle("geom_point()") + 
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  theme_void(13, base_family = "Menlo") + 
  theme(plot.title = element_text(color = "#3379be", face = "bold"))

ggplot(df, aes(Income)) + 
  geom_histogram(bins = 15, color = data_color, fill = data_color, alpha = .5, lwd = 1.25) + ggtitle("geom_histogram()") + 
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  theme_void(13, base_family = "Menlo") + 
  theme(plot.title = element_text(color = "#3379be", face = "bold"))

ggplot(df, aes(Income)) + 
  geom_density(color = data_color, lwd = 1.25) + 
  ggtitle("geom_density()") + 
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  theme_void(13, base_family = "Menlo") + 
  theme(plot.title = element_text(color = "#3379be", face = "bold"))

ggplot(df, aes(x = Region, y = Income)) + 
  geom_boxplot(color = data_color, lwd = 1.25) + ggtitle("geom_boxplot()") + 
  scale_x_discrete(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  theme_void(13, base_family = "Menlo") + 
  theme(plot.title = element_text(color = "#3379be", face = "bold"))

ggplot(df, aes(x = Region)) + 
  geom_bar(fill = data_color, color = data_color, alpha = .5, width = .8, lwd = 1.25) + ggtitle("geom_bar()") + 
  scale_x_discrete(expand = expansion(mult = 4*m)) +
  scale_y_continuous(expand = expansion(mult = 1.5*m)) +
  theme_void(13, base_family = "Menlo") + 
  theme(plot.title = element_text(color = "#3379be", face = "bold"))

ggplot(df, aes(x = Region)) + 
  geom_bar(fill = data_color, color = data_color, alpha = .5, width = .8, lwd = 1.25) + ggtitle("geom_col()") +
  scale_x_discrete(expand = expansion(mult = 4*m)) +
  scale_y_continuous(expand = expansion(mult = 1.5*m)) +
  theme_void(13, base_family = "Menlo") + 
  theme(plot.title = element_text(color = "#3379be", face = "bold"))
```

Once these geoms are mastered, the hope is that it will be easy to learn additional geoms as you'll know how they work. (Did you know that `geom_bar()` and `geom_col()` produce the same visual? We'll discuss why later.)

## Aesthetic mappings

An aesthetic mapping relates visual properties with variables (also called features or columns) in the data. There are a limited number of aesthetic mappings; some of the most common are `x`, `y`, `color`, and `fill`. For example, to create the following scatterplot, we map `x` to `Income` and `y` to `Illiteracy`:

```{r}
#| echo: false
#| layout-ncol: 2

ggplot(df, aes(Income/1000, Illiteracy/100)) +
  geom_point(color = data_color) +
  scale_x_continuous(name = "Per capita income (in thousands of $)") +
  scale_y_continuous(name = "Illiteracy rate", labels = scales::percent) +
  labs(title = "Illiteracy vs. Income by State", caption = "Data: state.x77, base R dataset") +
  theme_bw(13)

source("helpers.R")
arrow_chart(domain = c("x", "y"), range = c("Income", "Illiteracy")) +
  ggtitle("Aesthetic mappings")

```

For each geom, there is a small set of required mappings and a much larger set of optional mappings. The catch is that sometimes it may not be clear which mappings are required. In this guide we will always make a special point of indicating the required mappings, as this can be a stumbling block for beginners.

::: callout-tip
Whenever you learn a new geom, pay careful attention to the required mappings.
:::

Let's consider an example. `geom_histogram()` has **one** required mapping **`x` or `y`**. A standard histogram with vertical bars is produced by mapping `x` though there may be circumstances in which a `y` mapping is desired, for example to create a population pyramid.

```{r}
#| echo: false
#| layout-ncol: 2

ggplot(df, aes(x = Income)) +
  geom_histogram(bins = 15, color = data_color, fill = data_color, alpha = .5, lwd = 1.25) +
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  ggtitle("x mapped to variable") +
  theme_void(fs)

ggplot(df, aes(y = Income)) +
  geom_histogram(bins = 15, color = data_color, fill = data_color, alpha = .5, lwd = 1.25) +
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  ggtitle("y mapped to variable") +
  theme_void(fs)

```

## Continuous vs. discrete mappings

::: callout-tip
## Don't skip this section.

It's really important. ðŸ¤“
:::

In addition to knowing the required mappings, it is critical to know whether the the visual component (`x`, `y`, `fill`, `color`, etc.) must be mapped to a *continuous* (think numerical) variable, *discrete* (think categorical) variable, or either one. If you're working with columns in a data frame you will likely know their data types, but there are times when you'll need to check that the data types are correct. There are many ways to check; depending on the method, continuous columns will be marked as `numeric`, `num`, `dbl`, `integer`, or `dbl`. *Discrete* mappings will appear as: `factor`, `character`, `chr`, `Factor`, `fct`, `Ord.factor`, `ord`, `logi`, `logical`, `lgl`, to indicate that the variable is a character, factor, or logical. (The differences among the terms within each group are not important at the moment.)

Let's consider the built-in dataset `CO2`. Try running the code shown below for practice.

Recall that we first must be sure that we're working with a data frame:

```{r}
class(CO2)
```

Now let's look at the data types of the columns with `str()`:

```{r}
str(CO2)
```

Note that both `conc` and `uptake` have data type `num` which is *continuous*, while `Plant`, `Type` and `Treatment` have data types `Factor` or `Ord.factor` which are *discrete*.

Another method is to use `glimpse()` from the **dplyr** package, which is similar to `str()` but shows more data and less attribute information:

```{r}
library(dplyr)
glimpse(CO2)
```

We see that `glimpse()` labels the *continuous* (numeric) columns as `<dbl>` rather than `num` and the *discrete* columns as `<fct>` and `<ord>`. Again, for our purposes, this distinction isn't important.

::: callout-tip
`View()` and `head()` -- common methods for looking at data -- do NOT show data types so should not be used in this situation.
:::

### An example

Suppose we wish to draw histograms of the *continuous* variables in the `CO2` dataset. Since histogram represents the distribution of a numerical variable and has no meaning for categorical variables, the mapping must be to a numerical variable. Our choices therefore are `conc` and `uptake`:

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 4
#| layout: [[-5, 45, -5, 45, -5]]

ggplot(CO2, aes(conc)) + 
  geom_histogram(breaks = seq(0, 1000, 125), color = data_color, fill = "#98C8EA", lwd = 1.25) +
  ggtitle("Histogram of conc") + 
  theme_bw(16)

ggplot(CO2, aes(uptake)) + 
  geom_histogram(breaks = seq(0, 50, 5), color = data_color, fill = "#98C8EA", lwd = 1.25) +
  ggtitle("Histogram of uptake") + 
  theme_bw(16)
```

If we try to try, though, to draw a histogram of a *discrete* variable, such as `Plant`, we'll get an error:

```{r}
#| echo: false
#| error: true
ggplot(CO2, aes(Plant)) + 
  geom_histogram(color = "black", fill = data_color) +
  ggtitle("Histogram of Plant") + 
  theme_bw(fs)
```

We're ready now to combine the three essentials of a layer--data, an aesthetic mapping, and a geom--to create our first plot.

## Our first plot

To review we said that plots are made up of layers, scales, coordinate systems, faceting, and themes. We begin by focusing on the layers and relying on defaults for all the rest. Each layer we said is composed of data, aesthetic mappings, geoms, stat and position. We will focus on **data**, **aesthetic mappings**, and **geoms**, and rely on defaults for stat and position.

::: callout-tip
Always start with the geom and ask yourself: what are the required aesthetic mappings?
:::

Let's make a histogram using the built-in dataset `faithful`. We confirm that it's a data frame and then determine that both variables are continuous (type `num`) and therefore either would work with `geom_histogram()`, which as we said requires continuous aesthetic mappings:

```{r}
class(faithful)
str(faithful)
```

Let's draw a histogram with the `waiting` variable. We now have everything we need:

1.  data: `faithful`
2.  mapping: `x` âžž `waiting`
3.  geom: `geom_histogram()`

All that's left is to convert this to ggplot2 code. Typically the data and mapping are indicated in the call to `ggplot()` which initializes the plot, and then we add in the geom.

```{r}
#| message: true
library(ggplot2)
ggplot(data = faithful, mapping = aes(x = waiting)) +
  geom_histogram()
```

And we have our first plot! A few things to note:

- ggplot2 tries its best to teach you how to create good graphs.[^layers-1] In this case, it is communicating that the default number of bins for histograms drawn with ggplot2 is 30. Rather than rely on the default, you should try different values for <code>[binwidth =]{.at}</code> (or <code>[bins =]{.at}</code> or <code>[breaks =]{.at}</code>) to find one that best captures the shape of the distribution.

- You cannot start a new line with <code>[+]{.sc}</code>. It is good practice to start a new line *after* every <code>[+]{.sc}</code>.

- This plot isn't very pretty. It's very tempting to change the colors, font size, etc. but we're going to save that for later.

[^layers-1]: There's a long history in R, dating back to the development of its predecessor, S, of following best practices for creating statistic graphics. Many of the help files for base R and ggplot2 plotting functions contain references to research by William Cleveland and others on creating effective graphs. (add references)
